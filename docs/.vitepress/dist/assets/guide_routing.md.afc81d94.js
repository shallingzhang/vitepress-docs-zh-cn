import{_ as s,o as a,c as n,a as e}from"./app.3b22078c.js";const A=JSON.parse('{"title":"路由","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本路由","slug":"基本路由","link":"#基本路由","children":[]}],"relativePath":"guide/routing.md","lastUpdated":null}'),t={name:"guide/routing.md"},l=e(`<h1 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-hidden="true">#</a></h1><p>VitePress 是使用基于文件系统的路由构建的，这意味着源文件的目录结构对应于最终 URL。您也可以自定义目录结构和 URL 的映射。通过阅读此页面，了解有关 VitePress 路由系统的所有信息。</p><h2 id="基本路由" tabindex="-1">基本路由 <a class="header-anchor" href="#基本路由" aria-hidden="true">#</a></h2><p>默认情况下，VitePress 假定您的页面文件存储在项目的根目录中。在这里，您可以添加名称为URL路径的 markdown 文件。例如，当您具有以下目录结构时：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ guide</span></span>
<span class="line"><span style="color:#A6ACCD;">│  ├─ getting-started.md</span></span>
<span class="line"><span style="color:#A6ACCD;">│  └─ index.md</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ index.md</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ prologue.md</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>然后，您可以通过以下 URL 访问页面。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">index.md           -&gt; /</span></span>
<span class="line"><span style="color:#A6ACCD;">prologue.md        -&gt; /prologue.html</span></span>
<span class="line"><span style="color:#A6ACCD;">guide/index.md     -&gt; /guide/</span></span>
<span class="line"><span style="color:#A6ACCD;">getting-started.md -&gt; /guide/getting-started.html</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>如您所见，目录结构对应于最终 URL，就像从典型的 Web 服务器托管普通的 HTML 一样。</p>`,8),p=[l];function o(i,c,r,d,g,C){return a(),n("div",null,p)}const _=s(t,[["render",o]]);export{A as __pageData,_ as default};
